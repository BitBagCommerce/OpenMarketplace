imports:
    - { resource: "@SyliusCoreBundle/Resources/config/app/config.yml" }

    - { resource: "@SyliusAdminBundle/Resources/config/app/config.yml" }

    - { resource: "@SyliusShopBundle/Resources/config/app/config.yml" }

    - { resource: "@SyliusApiBundle/Resources/config/app/config.yaml" }

    - { resource: "@BitBagSyliusMultiVendorMarketplacePlugin/Resources/config/config.yml"}

parameters:
    sylius_core.public_dir: '%kernel.project_dir%/public'

sylius_product:
    resources:
        product:
            classes:
                model: 'BitBag\SyliusMultiVendorMarketplacePlugin\Entity\Product'

sylius_shop:
    product_grid:
        include_all_descendants: true

winzou_state_machine:
    mvm_product_listing:
        class: 'BitBag\SyliusMultiVendorMarketplacePlugin\Entity\ProductListing\ProductDraft'
        property_path: status
        graph: product_draft
        states:
            created: ~
            under_verification: ~
            accepted: ~
            rejected: ~
        transitions:
            send_to_verification:
                from: ['created']
                to: 'under_verification'
            accept_product_draft:
                from: ['under_verification']
                to: 'accepted'
            reject_product_draft:
                from: ['under_verification']
                to: 'rejected'
        callbacks:
            after:
                send_to_verification:
                    on: [ 'send_to_verification' ]
                    do: [ '@bitbag_mvm_plugin.state_machine.product_draft', 'sendToVerify' ]
                    args: [ 'object' ]
                accept_product_listing:
                    on: ['accept_product_draft']
                    do: ['@bitbag_mvm_plugin.state_machine.product_draft', 'accept']
                    args: ['object']
                reject_product_listing:
                    on: [ 'reject_product_draft' ]
                    do: [ '@bitbag_mvm_plugin.state_machine.product_draft', 'reject' ]
                    args: [ 'object' ]
    sylius_order_payment:
        class: "%sylius.model.order.class%"
        property_path: paymentState
        graph: sylius_order_payment
        state_machine_class: "%sylius.state_machine.class%"
        states:
            cart: ~
            awaiting_payment: ~
            partially_authorized: ~
            authorized: ~
            partially_paid: ~
            cancelled: ~
            paid: ~
            partially_refunded: ~
            refunded: ~
        transitions:
            request_payment:
                from: [cart]
                to: awaiting_payment
            partially_authorize:
                from: [awaiting_payment, partially_authorized]
                to: partially_authorized
            authorize:
                from: [awaiting_payment, partially_authorized]
                to: authorized
            partially_pay:
                from: [awaiting_payment, partially_paid, partially_authorized]
                to: partially_paid
            cancel:
                from: [awaiting_payment, authorized, partially_authorized]
                to: cancelled
            pay:
                from: [awaiting_payment, partially_paid, authorized]
                to: paid
            partially_refund:
                from: [paid, partially_paid, partially_refunded]
                to: partially_refunded
            refund:
                from: [paid, partially_paid, partially_refunded]
                to: refunded
        callbacks:
            after:
                sylius_order_paid:
                    on: ["pay"]
                    do: ["@sylius.inventory.order_inventory_operator", "sell"]
                    args: ["object"]
                    priority: -200
                sylius_pay_suborders:
                    on: ["pay"]
                    do: [ "@sm.callback.cascade_transition", "apply" ]
                    args: [ "object.getSecondaryOrders()", "event" ]
                    priority: -200

